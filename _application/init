#!/usr/bin/env php
<?php
/**
 * Yii Application Initialization Tool
 *
 * In order to run in non-interactive mode:
 *
 * init --env=Development --overwrite=n
 *
 * @author Alexander Makarov <sam@rmcreative.ru>
 *
 * @link http://www.yiiframework.com/
 * @copyright Copyright (c) 2008 Yii Software LLC
 * @license http://www.yiiframework.com/license/
 */

if (!extension_loaded('mcrypt')) {
    die('The mcrypt PHP extension is required by Yii2.');
}

$params     = getParams();
$root       = str_replace('\\', '/', dirname(__DIR__));
$envs       = require("$root/_application/environments/index.php");
$envNames   = array_keys($envs);

echo "Yii Application Initialization Tool v1.0\n\n";

$envName = null;
if (empty($params['env']) || $params['env'] === '1') {
    echo "Which environment do you want the application to be initialized in?\n\n";
    foreach ($envNames as $i => $name) {
        echo "  [$i] $name\n";
    }
    echo "\n  Your choice [0-" . (count($envs) - 1) . ', or "q" to quit] ';
    $answer = trim(fgets(STDIN));

    if (!ctype_digit($answer) || !in_array($answer, range(0, count($envs) - 1))) {
        echo "\n  Quit initialization.\n";
        exit(0);
    }

    if (isset($envNames[$answer])) {
        $envName = $envNames[$answer];
    }
} else {
    $envName = $params['env'];
}

if (!in_array($envName, $envNames)) {
    $envsList = implode(', ', $envNames);
    echo "\n  $envName is not a valid environment. Try one of the following: $envsList. \n";
    exit(2);
}

$env = $envs[$envName];

if (empty($params['env'])) {
    echo "\n  Initialize the application under '{$envNames[$answer]}' environment? [yes|no] ";
    $answer = trim(fgets(STDIN));
    if (strncasecmp($answer, 'y', 1)) {
        echo "\n  Quit initialization.\n";
        exit(0);
    }
}

echo "\n  Start initialization ...\n\n";
$files = getFileList("$root/_application/environments/{$env['path']}");
$all = false;
foreach ($files as $file) {
    if (!copyFile($root, "_application/environments/{$env['path']}/$file", $file, $all, $params)) {
        break;
    }
}

// create extra dirs/files -----------------------------------------------------
$themes = ['default', 'cerulean', 'slate', 'spacelab'];
$paths = [
    $root . '/_application/backend/runtime',
    $root . '/_application/frontend/runtime',
    $root . '/_application/console/runtime',
    $root . '/_application/common/config/multidb',
    $root . '/web/assets',
    $root . '/web/backend/assets',
];
foreach ($themes as $theme) {
    $paths[] = $root . '/web/themes/'.$theme.'/compiled';
    $paths[] = $root . '/web/themes/'.$theme.'/.sass-cache';
    $paths[] = $root . '/web/backend/themes/'.$theme.'/compiled';
    $paths[] = $root . '/web/backend/themes/'.$theme.'/.sass-cache';
}

foreach ($paths as $path) {
    if (!is_dir($path)) {
        @mkdir($path, 0777, true);
    }
    if ( is_dir($path) && !is_file($path . '/.gitignore') ) {
        file_put_contents($path . '/.gitignore', "*\n!.gitignore\n");
    }
}
// -----------------------------------------------------------------------------

$callbacks = ['setCookieValidationKey', 'setWritable', 'setExecutable'];
foreach ($callbacks as $callback) {
    if (!empty($env[$callback])) {
        $callback($root, $env[$callback]);
    }
}

// Initialize db connections ---------------------------------------------------

$dbRoot = "$root/_application/environments/{$env['path']}/_application/common/config/multidb/";
$targetDbRoot= "$root/_application/common/config/multidb/";
$dbFiles = getFileList($dbRoot);
foreach ($dbFiles as $file){
    $targetFile = $targetDbRoot.$file;
    if ($all) {
        echo "  overwrite $file\n";
    } else {
        echo "      exist $file\n";
        if (empty($params['overwrite'])){
            echo "            ...overwrite? [Yes|No|All|Quit] ";
            $answer = trim(fgets(STDIN));
        } else {
            $answer = $params['overwrite'];
        }
        
        if (strncasecmp($answer, 'q', 1)===0) {
            echo "\n  Quit initialization.\n";
            exit(0);
        } else if (strncasecmp($answer, 'y', 1)===0) {
            echo "  overwrite $file\n";
        } else if (strncasecmp($answer, 'a', 1)===0) {
            echo "  overwrite $file\n";
            $all = true;
        } else {
            echo "       skip $file\n";
            continue;
        }
    }
    
    if (strncasecmp($file, 'db', 2) === 0){
        $contents = initDb($dbRoot.$file);
    }
    
    file_put_contents($targetFile, $contents);
}
// -----------------------------------------------------------------------------

echo "\n  ... initialization completed.\n\n";

function initDb($configFile){
    $settingregex = "/([^=]+)=>([^,]+)/";
    $regex = "/'.*\\n/";
    $contents = file_get_contents($configFile);
    $file = basename($configFile);
    $array=[];
    $config=[];
    preg_match_all($regex,$contents,$array);
    echo "    Please confirm your settings for the $file connection.".PHP_EOL;
    echo "    Leave your value empty to use the default value shown in bracess.\n";
    foreach ($array[0] as $confLine){
        preg_match_all($settingregex,$confLine,$values);
        $index=trim($values[1][0]," '");
        $defaultValue=trim($values[2][0]," '");
        if (strcmp($index,'dsn')==0){
            echo "    dsn type [mysql]: ";
            $dbm = trim(fgets(STDIN));
            $dbm=$dbm===""?"mysql":$dbm;
//            echo "      * $dbm".PHP_EOL;
            echo "    dsn host [127.0.0.1]: ";
            $host = trim(fgets(STDIN));
            $host=$host===""?"127.0.0.1":$host;
//            echo "      * $host".PHP_EOL;
            echo "    dsn dbname [semanti]: ";
            $db = trim(fgets(STDIN));
            $db=$db===""?"semanti":$db;
//            echo "      * $db".PHP_EOL;
            $dsn= "$dbm:host=$host;dbname=$db";
            $config['dsn']=$dsn;
            echo "    dsn: $dsn".PHP_EOL;
            continue;
        }
        echo "    $index [$defaultValue]: ";
        $value = trim(fgets(STDIN));
        if (strcmp("true",strtolower($value))===0){
            $value=true;
        }
        if (strcmp("false",strtolower($value))===0){
            $value=false;
        }
        if (strcmp("true",strtolower($defaultValue))===0){
            $defaultValue=true;
        }
        if (strcmp("false",strtolower($defaultValue))===0){
            $defaultValue=false;
        }
        $config[$index]=$value==""?$defaultValue:$value;
//        echo "      * ".var_export($config[$index],true).PHP_EOL;
    }
    return "<?php return ".str_replace("\\\\","\\",var_export($config,true))."; ?>";
}

function getFileList($root, $basePath = '')
{
    $files = [];
    $handle = opendir($root);
    while (($path = readdir($handle)) !== false) {
        if ($path === '.svn' || $path === '.' || $path === '..') {
            continue;
        }
        $fullPath = "$root/$path";
        $relativePath = $basePath === '' ? $path : "$basePath/$path";
        if (is_dir($fullPath)) {
            $files = array_merge($files, getFileList($fullPath, $relativePath));
        } else {
            $files[] = $relativePath;
        }
    }
    closedir($handle);
    return $files;
}

function copyFile($root, $source, $target, &$all, $params)
{
    if (!is_file($root . '/' . $source)) {
        echo "       skip $target ($source not exist)\n";
        return true;
    }
    if (is_file($root . '/' . $target)) {
        if (file_get_contents($root . '/' . $source) === file_get_contents($root . '/' . $target)) {
            echo "  unchanged $target\n";
            return true;
        }
        if ($all) {
            echo "  overwrite $target\n";
        } else {
            echo "      exist $target\n";
            echo "            ...overwrite? [Yes|No|All|Quit] ";


            $answer = !empty($params['overwrite']) ? $params['overwrite'] : trim(fgets(STDIN));
            if (!strncasecmp($answer, 'q', 1)) {
                return false;
            } else {
                if (!strncasecmp($answer, 'y', 1)) {
                    echo "  overwrite $target\n";
                } else {
                    if (!strncasecmp($answer, 'a', 1)) {
                        echo "  overwrite $target\n";
                        $all = true;
                    } else {
                        echo "       skip $target\n";
                        return true;
                    }
                }
            }
        }
        file_put_contents($root . '/' . $target, file_get_contents($root . '/' . $source));
        return true;
    }
    echo "   generate $target\n";
    @mkdir(dirname($root . '/' . $target), 0777, true);
    file_put_contents($root . '/' . $target, file_get_contents($root . '/' . $source));
    return true;
}

function getParams()
{
    $rawParams = [];
    if (isset($_SERVER['argv'])) {
        $rawParams = $_SERVER['argv'];
        array_shift($rawParams);
    }

    $params = [];
    foreach ($rawParams as $param) {
        if (preg_match('/^--(\w+)(=(.*))?$/', $param, $matches)) {
            $name = $matches[1];
            $params[$name] = isset($matches[3]) ? $matches[3] : true;
        } else {
            $params[] = $param;
        }
    }
    return $params;
}

function setWritable($root, $paths)
{
    foreach ($paths as $writable) {
        echo "      chmod 0777 $writable\n";
        @chmod("$root/$writable", 0777);
    }
}

function setExecutable($root, $paths)
{
    foreach ($paths as $executable) {
        echo "      chmod 0755 $executable\n";
        @chmod("$root/$executable", 0755);
    }
}

function setCookieValidationKey($root, $paths)
{
    foreach ($paths as $file) {
        echo "   generate cookie validation key in $file\n";
        $file = $root . '/' . $file;
        $length = 32;
        $bytes = mcrypt_create_iv($length, MCRYPT_DEV_URANDOM);
        $key = strtr(substr(base64_encode($bytes), 0, $length), '+/=', '_-.');
        $content = preg_replace('/(("|\')cookieValidationKey("|\')\s*=>\s*)(""|\'\')/', "\\1'$key'", file_get_contents($file));
        file_put_contents($file, $content);
    }
}

function createSymlink($links)
{
    foreach ($links as $link => $target) {
        echo "    symlink $target as $link\n";
        if (!is_link($link)) {
            symlink($target, $link);
        }
    }
}
